{
    "init": {
        "prefix": "init",
        "body": [
            "/**",
            " * Created by akbar on 8/11/2021.",
            " */",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "#ifdef DEBUG",
            "#include \"../lib/debugger.h\"",
            "#define Debug(...) DebugPrint(#__VA_ARGS__, __VA_ARGS__)",
            "#else",
            "#define Debug(...)",
            "#endif",
            "",
            "int main()",
            "{",
            "    ios::sync_with_stdio(false);",
            "    cin.tie(nullptr);",
            "",
            "\t$0",
            "",
            "    return 0;",
            "}",
        ]
    },
    //=====================================================================================================//
    //====================================         timer             ======================================//
    //=====================================================================================================//
    "timer": {
        "prefix": "timer",
        "body": [
            "struct Timer",
            "{",
            "    chrono::time_point<chrono::high_resolution_clock> start, end;",
            "    chrono::duration<float> duration{};",
            "",
            "    Timer()",
            "    {",
            "        start = chrono::high_resolution_clock::now();",
            "    }",
            "",
            "    ~Timer()",
            "    {",
            "        end = chrono::high_resolution_clock::now();",
            "        duration = end - start;",
            "        float ms = duration.count() * 1000.0f;",
            "        cout << \"[Execution time \" << ms << \" ms]\\n\";",
            "    }",
            "};",
        ],
    },
    //=====================================================================================================//
    //====================================         i/o               ======================================//
    //=====================================================================================================//
    "printer": {
        "prefix": "printer",
        "body": [
            "inline void Print()",
            "{",
            "    cout << \"\\n\";",
            "}",
            "",
            "template <typename T>",
            "inline void Print(T var, bool newLine = true)",
            "{",
            "    cout << var;",
            "    if (newLine)",
            "        Print();",
            "}",
            "",
            "template <typename T, typename... Args>",
            "inline void Print(T var, Args... args)",
            "{",
            "    Print(var, false);",
            "    if (sizeof...(args))",
            "        cout << \" \";",
            "    Print(args...);",
            "}",
        ]
    },
    "scanner": {
        "prefix": "scanner",
        "body": [
            "template <typename T>",
            "inline void Scan(T &var)",
            "{",
            "    cin >> var;",
            "}",
            "",
            "template <typename T, typename... Args>",
            "inline void Scan(T &var, Args &&...args)",
            "{",
            "    Scan(var);",
            "    if (sizeof...(args))",
            "        Scan(args...);",
            "}",
        ]
    },
    //=====================================================================================================//
    //====================================         array             ======================================//
    //=====================================================================================================//
    "array-size": {
        "prefix": "array-size",
        "body": [
            "sizeof($1) / sizeof(($1)[0])$0"
        ]
    },
    "array-sort": {
        "prefix": "array-sort",
        "body": [
            "template <typename T, size_t N>",
            "inline void Sort(T (&arr)[N], bool isDecrement = false)",
            "{",
            "    int size = (sizeof(arr) / sizeof((arr)[0]));",
            "    if (isDecrement)",
            "        sort(arr, arr + size, greater<>());",
            "    else",
            "        sort(arr, arr + size);",
            "}",
        ]
    },
    "array-sort-comparator": {
        "prefix": "array-sort-comparator",
        "body": [
            "template <typename T, size_t N, typename U>",
            "inline void Sort(T (&arr)[N], U &_comparator)",
            "{",
            "    sort(arr, arr + ArrSize(arr), _comparator);",
            "}",
        ]
    },
    //=====================================================================================================//
    //====================================         vector            ======================================//
    //=====================================================================================================//
    "vector-size": {
        "prefix": "vector-size",
        "body": [
            "$1.begin(), $1.end()$0"
        ]
    },
    "vector-sort": {
        "prefix": "vector-sort",
        "body": [
            "template <typename T>",
            "inline void Sort(vector<T> &vec, bool isDecrement = false)",
            "{",
            "    if (isDecrement)",
            "        sort(vec.begin(), vec.end(), greater<>());",
            "    else",
            "        sort(vec.begin(), vec.end());",
            "}",
        ]
    },
    "vector-sort-comparator": {
        "prefix": "vector-sort-comparator",
        "body": [
            "template <typename T, typename U>",
            "inline void Sort(vector<T> &vec, U &_comparator)",
            "{",
            "    sort(vec.begin(), vec.end(), _comparator);",
            "}",
        ]
    },
    //=====================================================================================================//
    //====================================         iterable          ======================================//
    //=====================================================================================================//
    "iterable-fill": {
        "prefix": "iterable-fill",
        "body": [
            "#define Fill(iterable, value) \\",
            "    for (auto &element : iterable) element = value",
        ]
    },
    "iterable-clear": {
        "prefix": "iterable-clear",
        "body": [
            "#define Clear(iterable) \\",
            "    for (auto &element : iterable) element = 0",
        ]
    },
    "iterable-for-each": {
        "prefix": "each",
        "body": [
            "for(auto &$1: $2)",
            "{",
            "\t$0",
            "}",
        ]
    },
}